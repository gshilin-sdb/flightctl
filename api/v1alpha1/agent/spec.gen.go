// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zET+/xcAAP//lwUCYatuAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
