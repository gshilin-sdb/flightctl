// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//v+paT+KVAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
