// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BwAA//8QFHUZhZUBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
