// Code generated by MockGen. DO NOT EDIT.
// Source: internal/agent/device/hook/manager.go
//
// Generated by this command:
//
//	mockgen -source=internal/agent/device/hook/manager.go -destination=internal/agent/device/hook/mock_manager.go -package=hook
//

// Package hook is a generated GoMock package.
package hook

import (
	context "context"
	reflect "reflect"

	types "github.com/coreos/ignition/v2/config/v3_4/types"
	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Errors mocks base method.
func (m *MockManager) Errors() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].([]error)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *MockManagerMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockManager)(nil).Errors))
}

// OnAfterReboot mocks base method.
func (m *MockManager) OnAfterReboot(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnAfterReboot", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnAfterReboot indicates an expected call of OnAfterReboot.
func (mr *MockManagerMockRecorder) OnAfterReboot(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAfterReboot", reflect.TypeOf((*MockManager)(nil).OnAfterReboot), ctx)
}

// OnAfterUpdate mocks base method.
func (m *MockManager) OnAfterUpdate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnAfterUpdate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnAfterUpdate indicates an expected call of OnAfterUpdate.
func (mr *MockManagerMockRecorder) OnAfterUpdate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAfterUpdate", reflect.TypeOf((*MockManager)(nil).OnAfterUpdate), ctx)
}

// OnBeforeReboot mocks base method.
func (m *MockManager) OnBeforeReboot(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnBeforeReboot", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnBeforeReboot indicates an expected call of OnBeforeReboot.
func (mr *MockManagerMockRecorder) OnBeforeReboot(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnBeforeReboot", reflect.TypeOf((*MockManager)(nil).OnBeforeReboot), ctx)
}

// OnBeforeUpdate mocks base method.
func (m *MockManager) OnBeforeUpdate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnBeforeUpdate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnBeforeUpdate indicates an expected call of OnBeforeUpdate.
func (mr *MockManagerMockRecorder) OnBeforeUpdate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnBeforeUpdate", reflect.TypeOf((*MockManager)(nil).OnBeforeUpdate), ctx)
}

// OnPathCreated mocks base method.
func (m *MockManager) OnPathCreated(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPathCreated", path)
}

// OnPathCreated indicates an expected call of OnPathCreated.
func (mr *MockManagerMockRecorder) OnPathCreated(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPathCreated", reflect.TypeOf((*MockManager)(nil).OnPathCreated), path)
}

// OnPathRemoved mocks base method.
func (m *MockManager) OnPathRemoved(path string, content types.File) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPathRemoved", path, content)
}

// OnPathRemoved indicates an expected call of OnPathRemoved.
func (mr *MockManagerMockRecorder) OnPathRemoved(path, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPathRemoved", reflect.TypeOf((*MockManager)(nil).OnPathRemoved), path, content)
}

// OnPathUpdated mocks base method.
func (m *MockManager) OnPathUpdated(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPathUpdated", path)
}

// OnPathUpdated indicates an expected call of OnPathUpdated.
func (mr *MockManagerMockRecorder) OnPathUpdated(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPathUpdated", reflect.TypeOf((*MockManager)(nil).OnPathUpdated), path)
}

// Sync mocks base method.
func (m *MockManager) Sync(current, desired *v1alpha1.RenderedDeviceSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", current, desired)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockManagerMockRecorder) Sync(current, desired any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockManager)(nil).Sync), current, desired)
}
